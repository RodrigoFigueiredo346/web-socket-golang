// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createPanel = `-- name: CreatePanel :one
INSERT INTO panel (identifier, dscpanel, num_serie, active, ctrl_bright, dthr_ins, dthr_alt)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING idpanel
`

type CreatePanelParams struct {
	Identifier string
	Dscpanel   string
	NumSerie   string
	Active     sql.NullInt32
	CtrlBright sql.NullInt32
	DthrIns    sql.NullTime
	DthrAlt    sql.NullTime
}

func (q *Queries) CreatePanel(ctx context.Context, arg CreatePanelParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPanel,
		arg.Identifier,
		arg.Dscpanel,
		arg.NumSerie,
		arg.Active,
		arg.CtrlBright,
		arg.DthrIns,
		arg.DthrAlt,
	)
	var idpanel int32
	err := row.Scan(&idpanel)
	return idpanel, err
}

const createSinc = `-- name: CreateSinc :one
INSERT INTO sinc3 (idpanel, tag, data,  sinc)
VALUES ($1, $2, $3, $4)
RETURNING idsinc
`

type CreateSincParams struct {
	Idpanel string
	Tag     string
	Data    sql.NullString
	Sinc    int32
}

func (q *Queries) CreateSinc(ctx context.Context, arg CreateSincParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createSinc,
		arg.Idpanel,
		arg.Tag,
		arg.Data,
		arg.Sinc,
	)
	var idsinc int32
	err := row.Scan(&idsinc)
	return idsinc, err
}

const getPanelByIdentifier = `-- name: GetPanelByIdentifier :one
SELECT idpanel --, identifier, dscpanel, num_serie, active, ctrl_bright, dthr_ins, dthr_alt
FROM panel
WHERE identifier = $1
`

func (q *Queries) GetPanelByIdentifier(ctx context.Context, identifier string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getPanelByIdentifier, identifier)
	var idpanel int32
	err := row.Scan(&idpanel)
	return idpanel, err
}

const getSincsByPanelID = `-- name: GetSincsByPanelID :many
SELECT idsinc, idpanel, tag, data, dthr_ins, sinc, dthr_sinc
FROM sinc3
WHERE idpanel = $1
`

func (q *Queries) GetSincsByPanelID(ctx context.Context, idpanel string) ([]Sinc3, error) {
	rows, err := q.db.QueryContext(ctx, getSincsByPanelID, idpanel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sinc3
	for rows.Next() {
		var i Sinc3
		if err := rows.Scan(
			&i.Idsinc,
			&i.Idpanel,
			&i.Tag,
			&i.Data,
			&i.DthrIns,
			&i.Sinc,
			&i.DthrSinc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePanel = `-- name: UpdatePanel :exec
UPDATE panel
SET identifier = $2, dscpanel = $3, num_serie = $4, active = $5, ctrl_bright = $6, dthr_alt = $7
WHERE idpanel = $1
`

type UpdatePanelParams struct {
	Idpanel    int32
	Identifier string
	Dscpanel   string
	NumSerie   string
	Active     sql.NullInt32
	CtrlBright sql.NullInt32
	DthrAlt    sql.NullTime
}

func (q *Queries) UpdatePanel(ctx context.Context, arg UpdatePanelParams) error {
	_, err := q.db.ExecContext(ctx, updatePanel,
		arg.Idpanel,
		arg.Identifier,
		arg.Dscpanel,
		arg.NumSerie,
		arg.Active,
		arg.CtrlBright,
		arg.DthrAlt,
	)
	return err
}

const updateSincStatus = `-- name: UpdateSincStatus :exec
UPDATE sinc3
SET sinc = $2, dthr_sinc = $3, data = $4
WHERE idsinc = $1
`

type UpdateSincStatusParams struct {
	Idsinc   int32
	Sinc     int32
	DthrSinc sql.NullTime
	Data     sql.NullString
}

func (q *Queries) UpdateSincStatus(ctx context.Context, arg UpdateSincStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateSincStatus,
		arg.Idsinc,
		arg.Sinc,
		arg.DthrSinc,
		arg.Data,
	)
	return err
}
